What happens when you initialise a repository? Why do you need to do it?

When you initialise a repository, a .git file is created. This turns a local
directory into a git repository. Afterwards, you can run your git commands in
that directory, s.a. git status, git commit, etc.

======

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area is different from the working directory and the repository in
that it is an intermediate step. Here you can add files from the working
directory to the repository. It allows you to individually (or in bulk) add
files to be committed to the repository. This means you can group files that
constitute a single logical change. Furthermore, you can double-check if what
is in the staging area is the actual stuff that you want to commit. If not, you
can remove files with "git reset <file>" or "git rm --cached <file>..." to
unstage.

======

How can you use the staging area to make sure you have one commit per logical
change?

You can use the staging area to group files before you commit them. You can
execute the command "git status" before committing to review what you put in
the staging area.

======

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Some situations when branches would be helpful is when you have several people
working on a project, and some are working on the master branch, and others are
coding up an experimental feature. Also, if you want to use a different
language, say have a Spanish version of your project, it makes sense to put
this in a separate branch.

======

How do the diagrams help you visualize the branch structure?

Diagrams help with visualisation because you can see until what point different
branches share a common code base. Also, you can then inspect the commits to
see how exactly the different branches differ.

======

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together results in one branch that has the code from both
branches. The parts they have in common stay the same, and what is deleted in
one branch will be deleted in the new branch. Finally, what has been added in
either branch will be present in the new branch too. The way we represent it
makes sense (viewable with "git log --graph --oneline"), because here it is
easy to see the shared parent of the two branches, and the different commits in
both branches up until the moment they are merged.

======

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

The cons of automatic merging is that you don't have control over what happens
in the case of merge conflicts. You will want to have a look yourself what the
conflict is, and decide, perhaps after talking to your colleague, how you want
to resolve it.

A pro of automatic merging is that it is very convenient. You don't have to go
over both files to see what should be in the final file and what not.
