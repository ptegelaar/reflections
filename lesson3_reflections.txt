When would you want to create a remote repository rather than keeping all your
work local?

A remote repository is very convenient when you need to be able to access the
repo from several different locations. In addition, when you are working with
other people on the same repo, it is by definition a remote repo for all of
them. Finally, it is impossible to share a local repo with the public, which is
what a remote repo (set to public) can achieve.

======

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

Pulling changes manually is the better choice because it gives you control over
your local branch. Otherwise, you might be working on your local version, and
an automatic pull might cause merge conflicts, which would force you to review
and resolve these. This would be very interruptive.

======

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Branches are used when you want to work on a new feature or fix a bug.
Repositories are cloned when you want to start contributing to a project. Forks
are just clones on Github’s servers. They are useful when you either can’t be a
contributor to a project, or you have something different in mind with the
project compared to the project’s owner(s).

======

What is the benefit of having a copy of the last known state of the remote
stored locally?

A benefit of having a copy of the last known state of the remote repo stored is
that you don't have to download the complete repo every time, just the delta.
Furthermore, it gives you an idea how far ahead/behind or out-of-synch you are
with the remote.

======

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

Without using Git and Github, I would probably use another type of version
control system. If I also could not use this, then the alternatives are
Dropbox, Google Docs, or a server where you would ftp to. All these seem
horrible in comparison, because you lose so many useful features like branching
and merging, and having a list of commits to encapsulate logical changes.

======

You just saw that the workflow when making changes in a separate branch is more
complicated than working directly in master, especially when you need to stay
up-to-date with changes others are making. Rather than simply pulling and
pushing, you need to pull changes into your local master branch, merge the
local master into your branch (different-oil, in our case), then push your
branch to the remote before finally merging your branch into master, either
locally or on GitHub.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

Master should be the (shared) source of truth. The stable and robust production
version. When you want to make changes, then you should work on a separate
branch first and make your commits there. Then, when you are finished with
that, you can push your branch and make a pull request that you want to merge
your branch into the master branch.

Making changes to master directly on your local machine is definitely faster.
However, when you want to push those changes, it might create merge conflicts
with the master on the remote. Also, there is the drawback of having to
regularly pull the latest master branch and merging it into your local branch,
as to not get out of sync.
